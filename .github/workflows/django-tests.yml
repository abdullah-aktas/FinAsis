name: Django Tests

on:
  push:
    branches: [ develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ develop ]

env:
  SLACK_CHANNEL: ${{ vars.SLACK_CHANNEL || 'genel' }}
  DJANGO_SETTINGS_MODULE: config.settings.ci
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      POSTGRES_DB: test_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      DJANGO_SETTINGS_MODULE: config.settings.ci
      SECRET_KEY: test_secret_key
      PYTHONUNBUFFERED: 1
      DEBUG: 0

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest pytest-django pytest-cov

      - name: Kod kalite kontrolü (flake8)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

      - name: Kod stili kontrolü (black)
        run: |
          pip install black
          black . --check

      - name: Güvenlik taraması
        run: |
          pip install safety bandit
          safety check
          bandit -r . --exclude tests,venv,.venv

      - name: Dil dosyalarını derle
        run: |
          python manage.py compilemessages --locale=tr --locale=en --locale=de --locale=fr --locale=ar --locale=ku

      - name: Migrasyonları çalıştır
        run: |
          python manage.py migrate
          
      - name: Testleri çalıştır
        run: |
          pytest --cov=. --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

      - name: Test Sonuçlarını Slack'e Bildir
        uses: rtCamp/action-slack-notify@v2
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ${{ env.SLACK_CHANNEL }}
          SLACK_TITLE: "FinAsis Test Sonuçları"
          SLACK_USERNAME: "FinAsis CI/CD Bot"
          SLACK_MESSAGE: |
            ${{ github.workflow }} işlem ${{ job.status }} durumunda.
            Commit: ${{ github.event.head_commit.message }}
            Branch: ${{ github.ref }}
            Repository: ${{ github.repository }}
            ${{ job.status == 'success' && '✅ Testler başarılı!' || '❌ Testler başarısız! Lütfen hataları kontrol edin.' }}
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_FOOTER: "FinAsis CI/CD Sistemi | ${{ github.event.head_commit.timestamp }}"
          SLACK_ICON: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
