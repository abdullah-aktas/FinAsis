name: Django Test CI

on:
  push:
    branches: [main, master, dev, development]
  pull_request:
    branches: [main, master, dev, development]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finasis_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DJANGO_SETTINGS_MODULE: config.settings.test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/finasis_test
      PYTHONUNBUFFERED: 1

    steps:
    - name: Reposu Checkout Ediliyor
      uses: actions/checkout@v3

    - name: Python Kurulumu
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Bağımlılıklar Kuruluyor
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          pip install Django psycopg2-binary pytest pytest-django pytest-cov
        fi

    - name: Test Settings Kontrolü ve Oluşturma
      run: |
        if [ ! -f "config/settings/test.py" ]; then
          mkdir -p config/settings
          echo "from .base import *" > config/settings/test.py
          echo "" >> config/settings/test.py
          echo "# Test veritabanı ayarları" >> config/settings/test.py
          echo "DATABASES = {" >> config/settings/test.py
          echo "    'default': {" >> config/settings/test.py
          echo "        'ENGINE': 'django.db.backends.postgresql'," >> config/settings/test.py
          echo "        'NAME': 'finasis_test'," >> config/settings/test.py
          echo "        'USER': 'postgres'," >> config/settings/test.py
          echo "        'PASSWORD': 'postgres'," >> config/settings/test.py
          echo "        'HOST': 'localhost'," >> config/settings/test.py
          echo "        'PORT': '5432'," >> config/settings/test.py
          echo "    }" >> config/settings/test.py
          echo "}" >> config/settings/test.py
          echo "" >> config/settings/test.py
          echo "# Test ayarları" >> config/settings/test.py
          echo "DEBUG = False" >> config/settings/test.py
          echo "SECRET_KEY = 'django-insecure-test-key-only-for-ci'" >> config/settings/test.py
          echo "" >> config/settings/test.py
          echo "# Test için mail ayarları" >> config/settings/test.py
          echo "EMAIL_BACKEND = 'django.core.mail.backends.locmem.EmailBackend'" >> config/settings/test.py
          echo "" >> config/settings/test.py
          echo "# Test için cache ayarları" >> config/settings/test.py
          echo "CACHES = {" >> config/settings/test.py
          echo "    'default': {" >> config/settings/test.py
          echo "        'BACKEND': 'django.core.cache.backends.dummy.DummyCache'," >> config/settings/test.py
          echo "    }" >> config/settings/test.py
          echo "}" >> config/settings/test.py
        fi

    - name: .env Oluşturuluyor
      run: |
        echo "DEBUG=True" >> .env
        echo "SECRET_KEY=django-insecure-test-key-only-for-ci" >> .env
        echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> .env
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/finasis_test" >> .env

    - name: Migrasyon Kontrolü
      run: |
        python manage.py makemigrations --check --dry-run

    - name: Uygulama Testi Klasörü Kontrolü
      run: |
        for app in apps/*; do
          if [ -d "$app" ]; then
            if [ ! -d "$app/tests" ] && [ ! -f "$app/tests.py" ]; then
              mkdir -p "$app/tests"
              touch "$app/tests/__init__.py"
              echo "# Test dosyaları henüz oluşturulmadı - $app" > "$app/tests/README.md"
            fi
          fi
        done

    - name: Django Testleri Çalıştırılıyor
      run: |
        python manage.py test

    - name: Pytest ile Tüm Testler ve Kapsam Raporu
      run: |
        if pytest --collect-only -q 2>/dev/null; then
          pytest --cov=. --cov-report=xml
        else
          echo '<?xml version="1.0"?><coverage version="5.5"></coverage>' > coverage.xml
          echo "Pytest ile çalıştırılabilecek test bulunamadı."
        fi

    - name: Codecov Raporu Yükleniyor
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

    - name: Güvenlik Taraması
      run: |
        pip install safety
        safety check || echo "Güvenlik taraması tamamlandı."
