name: Feature Branch Workflow

on:
  push:
    branches:
      - 'feature/**'
      - 'dev/**'
      - 'improvement/**'
      - 'bugfix/**'
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - develop
      - main
      - master

env:
  SLACK_CHANNEL: ${{ vars.SLACK_CHANNEL || 'genel' }}
  DJANGO_SETTINGS_MODULE: config.settings.ci
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          pip install -r requirements.txt
      
      - name: Run flake8
        run: flake8 .
      
      - name: Run black
        run: black --check .
      
      - name: Run isort
        run: isort --check-only --profile black .
      
      - name: Run mypy
        run: mypy --ignore-missing-imports .

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    needs: lint
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    env:
      POSTGRES_DB: test_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      SECRET_KEY: test_secret_key
      DJANGO_SETTINGS_MODULE: config.settings.ci
      DEBUG: 0
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov
      
      - name: Check for migrations
        run: python manage.py makemigrations --check --dry-run
      
      - name: Compile translations
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext
          python manage.py compilemessages --locale=tr --locale=en --locale=de --locale=fr --locale=ar --locale=ku
      
      - name: Run migrations
        run: python manage.py migrate
      
      - name: Run tests
        run: |
          pytest --cov=. --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  i18n-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          sudo apt-get update
          sudo apt-get install -y gettext
      
      - name: Check translation files
        run: |
          python manage.py makemessages --all --check
      
      - name: Verify translation compilation
        run: |
          python manage.py compilemessages --locale=tr --locale=en --locale=de --locale=fr --locale=ar --locale=ku

  notification:
    runs-on: ubuntu-latest
    needs: [lint, test, i18n-validation]
    if: always()
    
    steps:
      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ${{ env.SLACK_CHANNEL }}
          SLACK_TITLE: "Feature Branch CI Sonuçları"
          SLACK_USERNAME: "FinAsis CI/CD Bot"
          SLACK_MESSAGE: |
            *Branch:* ${{ github.ref }}
            *Commit:* ${{ github.event.head_commit.message }}
            *Lint:* ${{ needs.lint.result }}
            *Test:* ${{ needs.test.result }}
            *i18n Validation:* ${{ needs.i18n-validation.result }}
            
            ${{ (needs.lint.result == 'success' && needs.test.result == 'success' && needs.i18n-validation.result == 'success') && '✅ Tüm kontroller başarılı.' || '❌ Bazı kontroller başarısız! Lütfen hataları düzeltin.' }}
            
            [İş Akışı Detayları](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          SLACK_COLOR: ${{ (needs.lint.result == 'success' && needs.test.result == 'success' && needs.i18n-validation.result == 'success') && 'good' || 'danger' }}
          SLACK_FOOTER: "FinAsis CI/CD Sistemi | ${{ github.event.head_commit.timestamp }}"
          SLACK_ICON: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" 