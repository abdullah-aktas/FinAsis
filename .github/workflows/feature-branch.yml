name: Feature Branch CI

on:
  push:
    branches: [ feature/* ]
  pull_request:
    branches: [ feature/* ]

env:
  PYTHON_VERSION: '3.11'
  DJANGO_SETTINGS_MODULE: config.settings.ci
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      POSTGRES_DB: ${{ secrets.DB_NAME }}
      POSTGRES_USER: ${{ secrets.DB_USER }}
      POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DJANGO_SETTINGS_MODULE: config.settings.ci
      SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      REDIS_URL: redis://localhost:6379/0
      PYTHONUNBUFFERED: 1

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements_for_games.txt
          pip install black flake8 pytest pytest-django pytest-cov safety bandit pytest-xdist

      - name: Check for security vulnerabilities
        run: |
          safety check
          bandit -r . -c pyproject.toml

      - name: Run black
        run: black . --check --diff

      - name: Run flake8
        run: |
          flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

      - name: Run migrations check
        run: |
          python manage.py makemigrations --check --dry-run

      - name: Run tests with coverage
        run: |
          python manage.py migrate
          pytest --cov=. --cov-report=xml --cov-fail-under=80 -v -n auto

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Test Sonuçlarını Slack'e Bildir
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ${{ env.SLACK_CHANNEL || 'genel' }}
          SLACK_TITLE: "FinAsis Feature Branch Test Sonuçları"
          SLACK_USERNAME: "FinAsis CI/CD Bot"
          SLACK_MESSAGE: |
            ${{ github.workflow }} iş akışı ${{ job.status }} durumunda tamamlandı.
            Branch: ${{ github.ref }}
            Commit: ${{ github.event.head_commit.message }}
            Kaynak: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ${{ job.status == 'success' && '✅ Testler başarılı.' || '❌ Testler başarısız! Lütfen hataları düzeltin.' }}
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_FOOTER: "FinAsis CI/CD Sistemi | ${{ github.event.head_commit.timestamp }}"
          SLACK_ICON: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/finasis:feature-${{ github.ref_name }}
            ${{ secrets.DOCKERHUB_USERNAME }}/finasis:feature-${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/finasis:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/finasis:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            DJANGO_SETTINGS_MODULE=config.settings.ci
            DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}

      - name: Build Sonuçlarını Slack'e Bildir
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ${{ env.SLACK_CHANNEL || 'genel' }}
          SLACK_TITLE: "FinAsis Feature Branch Build Sonuçları"
          SLACK_USERNAME: "FinAsis CI/CD Bot"
          SLACK_MESSAGE: |
            Docker build işlemi ${{ job.status }} durumunda tamamlandı.
            Branch: ${{ github.ref_name }}
            Image: ${{ secrets.DOCKERHUB_USERNAME }}/finasis:feature-${{ github.sha }}
            Kaynak: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_FOOTER: "FinAsis CI/CD Sistemi | ${{ github.event.head_commit.timestamp }}"
          SLACK_ICON: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" 