name: FinAsis CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10]
        node-version: [16.x, 18.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_for_games.txt
        pip install pytest pytest-cov pytest-django
    
    - name: Install Node.js dependencies
      run: npm ci
    
    - name: Run linting
      run: |
        flake8 .
        black . --check
        isort . --check-only
    
    - name: Run security checks
      run: |
        bandit -r .
        safety check
    
    - name: Run unit tests
      run: |
        pytest --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
    
    - name: Run UI tests
      run: |
        npm run test:ui
    
    - name: Run integration tests
      run: |
        pytest tests/test_api_endpoints.py tests/test_bank_integration.py tests/test_efatura.py -v
    
    - name: Run performance tests
      run: |
        locust -f tests/test_performance.py --headless -u 100 -r 10 --run-time 1m --host http://localhost:8000
    
    - name: Run OWASP ZAP scan
      uses: zaproxy/action-full-scan@v0.9.0
      with:
        target: 'http://localhost:8000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
    
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        SONAR_PROJECT_KEY: finasis
        SONAR_PROJECT_NAME: FinAsis
        SONAR_PROJECT_VERSION: ${{ github.sha }}
        SONAR_QUALITYGATE_WAIT: true
        SONAR_SCANNER_OPTS: -Dsonar.verbose=true
    
    - name: Build Docker image
      run: docker build -t finasis:${{ github.sha }} .
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Push Docker image
      run: |
        docker tag finasis:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/finasis:${{ github.sha }}
        docker tag finasis:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/finasis:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/finasis:${{ github.sha }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/finasis:latest
    
    - name: Create Release
      if: github.event_name == 'release' && github.event.action == 'published'
      run: |
        git tag -a v${{ github.event.release.tag_name }} -m "Release v${{ github.event.release.tag_name }}"
        git push origin v${{ github.event.release.tag_name }}
    
  deploy-staging:
    needs: test
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to staging
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/finasis
          docker-compose -f docker-compose.staging.yml pull
          docker-compose -f docker-compose.staging.yml up -d
          docker image prune -f
    
  deploy-production:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/finasis
          # Backup before deployment
          ./scripts/backup.sh
          # Deploy new version
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d
          docker image prune -f
          # Health check
          curl -f http://localhost:8000/health/ || exit 1
    
  rollback:
    needs: deploy-production
    if: failure()
    runs-on: ubuntu-latest
    
    steps:
    - name: Rollback to previous version
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/finasis
          ./scripts/rollback.sh $(date -d "1 day ago" +%Y%m%d_%H%M%S) ${{ secrets.SLACK_WEBHOOK_URL }} 