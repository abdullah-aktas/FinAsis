name: Hotfix Workflow

on:
  push:
    branches:
      - 'hotfix/**'
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - master

env:
  SLACK_CHANNEL: ${{ vars.SLACK_CHANNEL || 'kritik' }}
  DJANGO_SETTINGS_MODULE: config.settings.ci
  PYTHON_VERSION: '3.11'

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort safety bandit
          pip install -r requirements.txt
      
      - name: Run lint checks
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black . --check --diff
          isort . --check-only --profile black
      
      - name: Run security checks
        run: |
          safety check
          bandit -r . --exclude tests/,venv/,.venv/,node_modules/

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    env:
      POSTGRES_DB: test_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      SECRET_KEY: test_secret_key
      DEBUG: 0
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov
          sudo apt-get update
          sudo apt-get install -y gettext
      
      - name: Compile translations
        run: |
          python manage.py compilemessages --locale=tr --locale=en --locale=de --locale=fr --locale=ar --locale=ku
      
      - name: Run migrations
        run: python manage.py migrate
      
      - name: Run tests
        run: |
          pytest --cov=. --cov-report=xml --cov-fail-under=80
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  build-docker:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Get branch name
        id: get-branch
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          echo "branch=${BRANCH}" >> $GITHUB_OUTPUT
          echo "branch_tag=${BRANCH//\//-}" >> $GITHUB_OUTPUT
      
      - name: Login to DockerHub
        if: github.event_name == 'push'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name == 'push' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/finasis:hotfix-${{ steps.get-branch.outputs.branch_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DJANGO_SETTINGS_MODULE=config.settings.prod

  notification:
    runs-on: ubuntu-latest
    needs: [validate, test, build-docker]
    if: always()
    
    steps:
      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ${{ env.SLACK_CHANNEL }}
          SLACK_TITLE: "Hotfix Workflow Sonuçları"
          SLACK_USERNAME: "FinAsis CI/CD Bot"
          SLACK_MESSAGE: |
            *Branch:* ${{ github.ref }}
            *Commit:* ${{ github.event.head_commit.message }}
            *Validation:* ${{ needs.validate.result }}
            *Test:* ${{ needs.test.result }}
            *Docker Build:* ${{ needs.build-docker.result }}
            
            ${{ (needs.validate.result == 'success' && needs.test.result == 'success' && needs.build-docker.result == 'success') && '✅ Hotfix hazır ve test edildi.' || '❌ Hotfix sürecinde hatalar var! Acilen düzeltilmeli.' }}
            
            [İş Akışı Detayları](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          SLACK_COLOR: ${{ (needs.validate.result == 'success' && needs.test.result == 'success' && needs.build-docker.result == 'success') && 'good' || 'danger' }}
          SLACK_FOOTER: "FinAsis CI/CD Sistemi | ${{ github.event.head_commit.timestamp }}"
          SLACK_ICON: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" 