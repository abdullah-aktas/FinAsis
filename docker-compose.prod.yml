version: '3.9'

services:
  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - finasis
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - finasis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  web:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3 --threads 2 --timeout 120"
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - /var/log/finasis:/var/log/finasis
    env_file:
      - .env.prod
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - finasis
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.finasis.rule=Host(`finasis.com.tr`)"
      - "traefik.http.routers.finasis.entrypoints=websecure"
      - "traefik.http.routers.finasis.tls=true"
      - "traefik.http.routers.finasis.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.finasis-ratelimit.ratelimit.average=100"
      - "traefik.http.middlewares.finasis-ratelimit.ratelimit.burst=50"
      - "traefik.http.middlewares.finasis-ratelimit.ratelimit.period=1m"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A config worker -l INFO --concurrency=4
    volumes:
      - .:/app
      - /var/log/finasis:/var/log/finasis
    env_file:
      - .env.prod
    depends_on:
      - web
      - redis
    networks:
      - finasis
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
      replicas: 2

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A config beat -l INFO
    volumes:
      - .:/app
      - /var/log/finasis:/var/log/finasis
    env_file:
      - .env.prod
    depends_on:
      - web
      - redis
    networks:
      - finasis
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - web
    networks:
      - finasis
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`finasis.com.tr`)"
      - "traefik.http.routers.nginx.entrypoints=websecure"
      - "traefik.http.routers.nginx.tls=true"
      - "traefik.http.routers.nginx.tls.certresolver=letsencrypt"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  traefik:
    image: traefik:v2.10
    command:
      - "api.insecure=true"
      - "providers.docker=true"
      - "providers.docker.exposedbydefault=false"
      - "entrypoints.web.address=:80"
      - "entrypoints.websecure.address=:443"
      - "certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "certificatesresolvers.letsencrypt.acme.email=info@finasis.com.tr"
      - "accesslog=true"
      - "accesslog.filepath=/var/log/traefik/access.log"
      - "accesslog.fields.headers.names.X-Real-Ip=keep"
      - "accesslog.fields.headers.names.X-Forwarded-For=keep"
      - "accesslog.fields.headers.names.X-Forwarded-Proto=keep"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/etc/traefik
      - /var/log/traefik:/var/log/traefik
    networks:
      - finasis
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - finasis
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - finasis
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  traefik_data:
  prometheus_data:
  grafana_data:

networks:
  finasis:
    driver: bridge 