version: '3.9'

services:
  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - finasis
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - finasis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3 --threads 2"
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    env_file:
      - .env.prod
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - finasis
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.finasis.rule=Host(`finasis.com.tr`)"
      - "traefik.http.routers.finasis.entrypoints=websecure"
      - "traefik.http.routers.finasis.tls=true"
      - "traefik.http.routers.finasis.tls.certresolver=letsencrypt"

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A config worker -l INFO
    volumes:
      - .:/app
    env_file:
      - .env.prod
    depends_on:
      - web
      - redis
    networks:
      - finasis
    restart: always

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A config beat -l INFO
    volumes:
      - .:/app
    env_file:
      - .env.prod
    depends_on:
      - web
      - redis
    networks:
      - finasis
    restart: always

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - web
    networks:
      - finasis
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`finasis.com.tr`)"
      - "traefik.http.routers.nginx.entrypoints=websecure"
      - "traefik.http.routers.nginx.tls=true"
      - "traefik.http.routers.nginx.tls.certresolver=letsencrypt"

  traefik:
    image: traefik:v2.10
    command:
      - "api.insecure=true"
      - "providers.docker=true"
      - "providers.docker.exposedbydefault=false"
      - "entrypoints.web.address=:80"
      - "entrypoints.websecure.address=:443"
      - "certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "certificatesresolvers.letsencrypt.acme.email=info@finasis.com.tr"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/etc/traefik
    networks:
      - finasis
    restart: always

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  traefik_data:

networks:
  finasis:
    driver: bridge 