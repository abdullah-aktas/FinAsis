version: '3.8'

services:
  # Django web uygulaması
  web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=development
    command: gunicorn social.wsgi:application --bind 0.0.0.0:8000 --reload --workers 2 --threads 2 --timeout 120 --access-logfile - --error-logfile - --log-level debug
    volumes:
      - .:/app
      - /app/static
      - /app/media
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      - DJANGO_SETTINGS_MODULE=social.settings
      - DATABASE_URL=postgres://postgres:postgres@db:5432/social
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_DEBUG=True
      - DJANGO_SECRET_KEY=development-secret-key
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1
      - DJANGO_CORS_ORIGIN_WHITELIST=http://localhost:3000,http://127.0.0.1:3000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL veritabanı
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=social
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--data-checksums
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d social"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Redis (önbellek ve mesaj kuyruğu için)
  redis:
    image: redis:7.2-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru --protected-mode yes --requirepass redispass
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redispass", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Celery worker (arka plan görevleri için)
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=development
    command: celery -A social worker -l INFO --concurrency=2 --max-tasks-per-child=10 --max-memory-per-child=256000 --events --pool=prefork
    volumes:
      - .:/app
      - /app/static
      - /app/media
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      - DJANGO_SETTINGS_MODULE=social.settings
      - DATABASE_URL=postgres://postgres:postgres@db:5432/social
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_DEBUG=True
      - DJANGO_SECRET_KEY=development-secret-key
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1
    healthcheck:
      test: ["CMD", "celery", "-A", "social", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Celery beat (zamanlanmış görevler için)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=development
    command: celery -A social beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
      - /app/static
      - /app/media
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      - DJANGO_SETTINGS_MODULE=social.settings
      - DATABASE_URL=postgres://postgres:postgres@db:5432/social
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_DEBUG=True
      - DJANGO_SECRET_KEY=development-secret-key
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Nginx (statik dosya sunumu ve proxy için)
  nginx:
    image: nginx:1.23-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/static
      - media_volume:/app/media
      - ./nginx/logs:/var/log/nginx
    depends_on:
      web:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Flower (Celery monitoring)
  flower:
    image: mher/flower:latest
    command: flower --port=5555 --broker=redis://:redispass@redis:6379/0 --basic_auth=admin:admin
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - FLOWER_BASIC_AUTH=admin:admin
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5555/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: /var/lib/docker/volumes/social_postgres_data
      o: bind
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: /var/lib/docker/volumes/social_redis_data
      o: bind
  static_volume:
    driver: local
    driver_opts:
      type: none
      device: /var/lib/docker/volumes/social_static_volume
      o: bind
  media_volume:
    driver: local
    driver_opts:
      type: none
      device: /var/lib/docker/volumes/social_media_volume
      o: bind

networks:
  default:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: social_net
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true" 